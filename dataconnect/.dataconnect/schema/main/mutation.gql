extend type Mutation {
  """
  ✨ Insert a single `Campaign` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  campaign_insert(
    """
    Data object to insert into the table.
    """
    data: Campaign_Data!
  ): Campaign_KeyOutput! @fdc_generated(from: "Campaign", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Difficulty` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  difficulty_insert(
    """
    Data object to insert into the table.
    """
    data: Difficulty_Data!
  ): Difficulty_KeyOutput! @fdc_generated(from: "Difficulty", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Interest` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  interest_insert(
    """
    Data object to insert into the table.
    """
    data: Interest_Data!
  ): Interest_KeyOutput! @fdc_generated(from: "Interest", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Location` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  location_insert(
    """
    Data object to insert into the table.
    """
    data: Location_Data!
  ): Location_KeyOutput! @fdc_generated(from: "Location", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Quest` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  quest_insert(
    """
    Data object to insert into the table.
    """
    data: Quest_Data!
  ): Quest_KeyOutput! @fdc_generated(from: "Quest", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `QuestType` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  questType_insert(
    """
    Data object to insert into the table.
    """
    data: QuestType_Data!
  ): QuestType_KeyOutput! @fdc_generated(from: "QuestType", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Campaign` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  campaign_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Campaign_Data!]!
  ): [Campaign_KeyOutput!]! @fdc_generated(from: "Campaign", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Difficulty` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  difficulty_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Difficulty_Data!]!
  ): [Difficulty_KeyOutput!]! @fdc_generated(from: "Difficulty", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Interest` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  interest_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Interest_Data!]!
  ): [Interest_KeyOutput!]! @fdc_generated(from: "Interest", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Location` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  location_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Location_Data!]!
  ): [Location_KeyOutput!]! @fdc_generated(from: "Location", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Quest` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  quest_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Quest_Data!]!
  ): [Quest_KeyOutput!]! @fdc_generated(from: "Quest", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `QuestType` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  questType_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [QuestType_Data!]!
  ): [QuestType_KeyOutput!]! @fdc_generated(from: "QuestType", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Campaign` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Campaign`.
  """
  campaign_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Campaign_Data!
  ): Campaign_KeyOutput! @fdc_generated(from: "Campaign", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Difficulty` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Difficulty`.
  """
  difficulty_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Difficulty_Data!
  ): Difficulty_KeyOutput! @fdc_generated(from: "Difficulty", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Interest` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Interest`.
  """
  interest_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Interest_Data!
  ): Interest_KeyOutput! @fdc_generated(from: "Interest", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Location` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Location`.
  """
  location_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Location_Data!
  ): Location_KeyOutput! @fdc_generated(from: "Location", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Quest` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Quest`.
  """
  quest_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Quest_Data!
  ): Quest_KeyOutput! @fdc_generated(from: "Quest", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `QuestType` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `QuestType`.
  """
  questType_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: QuestType_Data!
  ): QuestType_KeyOutput! @fdc_generated(from: "QuestType", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Campaign` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Campaign`.
  """
  campaign_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Campaign_Data!]!
  ): [Campaign_KeyOutput!]! @fdc_generated(from: "Campaign", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Difficulty` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Difficulty`.
  """
  difficulty_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Difficulty_Data!]!
  ): [Difficulty_KeyOutput!]! @fdc_generated(from: "Difficulty", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Interest` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Interest`.
  """
  interest_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Interest_Data!]!
  ): [Interest_KeyOutput!]! @fdc_generated(from: "Interest", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Location` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Location`.
  """
  location_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Location_Data!]!
  ): [Location_KeyOutput!]! @fdc_generated(from: "Location", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Quest` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Quest`.
  """
  quest_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Quest_Data!]!
  ): [Quest_KeyOutput!]! @fdc_generated(from: "Quest", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `QuestType` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `QuestType`.
  """
  questType_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [QuestType_Data!]!
  ): [QuestType_KeyOutput!]! @fdc_generated(from: "QuestType", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Campaign` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Campaign` or `null` if not found.
  """
  campaign_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Campaign_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Campaign_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Campaign_Data!
  ): Campaign_KeyOutput @fdc_generated(from: "Campaign", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Difficulty` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Difficulty` or `null` if not found.
  """
  difficulty_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Difficulty_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Difficulty_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Difficulty_Data!
  ): Difficulty_KeyOutput @fdc_generated(from: "Difficulty", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Interest` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Interest` or `null` if not found.
  """
  interest_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Interest_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Interest_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Interest_Data!
  ): Interest_KeyOutput @fdc_generated(from: "Interest", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Location` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Location` or `null` if not found.
  """
  location_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Location_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Location_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Location_Data!
  ): Location_KeyOutput @fdc_generated(from: "Location", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Quest` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Quest` or `null` if not found.
  """
  quest_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Quest_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Quest_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Quest_Data!
  ): Quest_KeyOutput @fdc_generated(from: "Quest", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `QuestType` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `QuestType` or `null` if not found.
  """
  questType_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: QuestType_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: QuestType_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: QuestType_Data!
  ): QuestType_KeyOutput @fdc_generated(from: "QuestType", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Campaign` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  campaign_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Campaign_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Campaign_Data!
  ): Int! @fdc_generated(from: "Campaign", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Difficulty` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  difficulty_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Difficulty_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Difficulty_Data!
  ): Int! @fdc_generated(from: "Difficulty", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Interest` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  interest_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Interest_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Interest_Data!
  ): Int! @fdc_generated(from: "Interest", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Location` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  location_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Location_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Location_Data!
  ): Int! @fdc_generated(from: "Location", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Quest` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  quest_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Quest_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Quest_Data!
  ): Int! @fdc_generated(from: "Quest", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `QuestType` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  questType_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: QuestType_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: QuestType_Data!
  ): Int! @fdc_generated(from: "QuestType", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Campaign` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  campaign_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Campaign_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Campaign_FirstRow
  ): Campaign_KeyOutput @fdc_generated(from: "Campaign", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Difficulty` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  difficulty_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Difficulty_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Difficulty_FirstRow
  ): Difficulty_KeyOutput @fdc_generated(from: "Difficulty", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Interest` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  interest_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Interest_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Interest_FirstRow
  ): Interest_KeyOutput @fdc_generated(from: "Interest", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Location` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  location_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Location_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Location_FirstRow
  ): Location_KeyOutput @fdc_generated(from: "Location", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Quest` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  quest_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Quest_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Quest_FirstRow
  ): Quest_KeyOutput @fdc_generated(from: "Quest", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `QuestType` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  questType_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: QuestType_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: QuestType_FirstRow
  ): QuestType_KeyOutput @fdc_generated(from: "QuestType", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Campaign` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  campaign_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Campaign_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Campaign", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Difficulty` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  difficulty_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Difficulty_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Difficulty", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Interest` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  interest_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Interest_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Interest", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Location` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  location_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Location_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Location", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Quest` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  quest_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Quest_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Quest", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `QuestType` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  questType_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: QuestType_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "QuestType", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
