extend type Query {
  """
  ✨ Look up a single `Campaign` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  campaign(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Campaign_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Campaign_FirstRow
  ): Campaign @fdc_generated(from: "Campaign", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Difficulty` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  difficulty(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Difficulty_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Difficulty_FirstRow
  ): Difficulty @fdc_generated(from: "Difficulty", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Interest` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  interest(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Interest_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Interest_FirstRow
  ): Interest @fdc_generated(from: "Interest", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Location` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  location(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Location_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Location_FirstRow
  ): Location @fdc_generated(from: "Location", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Quest` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  quest(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Quest_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Quest_FirstRow
  ): Quest @fdc_generated(from: "Quest", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `QuestType` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  questType(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: QuestType_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: QuestType_FirstRow
  ): QuestType @fdc_generated(from: "QuestType", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Campaign` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  campaigns(
    """
    Filter condition to narrow down the query results.
    """
    where: Campaign_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Campaign_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Campaign_Having
  ): [Campaign!]! @fdc_generated(from: "Campaign", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Difficulty` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  difficulties(
    """
    Filter condition to narrow down the query results.
    """
    where: Difficulty_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Difficulty_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Difficulty_Having
  ): [Difficulty!]! @fdc_generated(from: "Difficulty", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Interest` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  interests(
    """
    Filter condition to narrow down the query results.
    """
    where: Interest_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Interest_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Interest_Having
  ): [Interest!]! @fdc_generated(from: "Interest", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Location` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  locations(
    """
    Filter condition to narrow down the query results.
    """
    where: Location_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Location_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Location_Having
  ): [Location!]! @fdc_generated(from: "Location", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Quest` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  quests(
    """
    Filter condition to narrow down the query results.
    """
    where: Quest_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Quest_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Quest_Having
  ): [Quest!]! @fdc_generated(from: "Quest", purpose: QUERY_MULTIPLE)
  """
  ✨ List `QuestType` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  questTypes(
    """
    Filter condition to narrow down the query results.
    """
    where: QuestType_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [QuestType_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: QuestType_Having
  ): [QuestType!]! @fdc_generated(from: "QuestType", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
